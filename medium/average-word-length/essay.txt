— Давай я покажу тебе две программки, которые решают одну и ту-же задачку. Одна — классически, а вторая с помощью стримов. Вы их будете скоро изучать. А ты скажешь, какой код более ясный и понятный. 
— Но только если они небольшие. 
— Они крошечные, буквально пару строк кода. Задачка такая: нужно найти среднюю длину слова в эссе. Мы на вход получаем строчку, находим все слова в ней и вычисляем их среднюю длину. Пробелы и знаки пунктуации мы не учитываем. 
— Задачка понятная. 
— Отлично. Вот здесь, я решил её классическим способом, вот тут...
— Подожди, давай я сама посмотрю и разберусь! 
— Хорошо.
— … … … … Что это за переменная essay? 
— Сюда мы считываем ввод. Это только одна строчка. В задачке было про эссе, вот я так и назвал переменную. Это «чистый код».
— А какой у неё тип? Почему здесь написано «var»? Это JavaScript?
— Нет, это Java. Тип у неё String. Видишь, мы вызываем input.nextLine(), это строчка.
— А что означает «var words = essay.split(" ")»? Что значит essay.split?
— Ну я же всё понятно написал. «words» это слова. Мне нужно узнать сколько слов и я разбиваю (split) эссе по пробелам на слова. Эта функция (split) создаёт массив строк, где каждый элемент — это отдельное слово...
— Я поняла! Words это массив слов.
— Нет! «words» это количество слов в эссе.
— Но ты же создаёшь массив строк?
— Да, я его создаю. Но он мне не нужен. Мне только нужно знать сколько у нас слов. Поэтому я и написал в конце .length — это то, сколько у нас элементов в массиве.
— Допустим. А где сам массив. Ты же его создал?
— Неважно. А вот «chars» — это я вычисляю количество букв. А следующей строчкой я вычисляю среднюю длину слова. 
— Ладно пропустим то, как ты считаешь количество букв, мне это не понятно. Но почему ты приводишь слова и буквы к типу double?
— Они же целые, а когда мы делим целые буквы на целые слова то результат не всегда тот, который мы ожидаем... Впрочем, это математика, это сложно. Давай, я тебе покажу вторую программку. Там нет ни переменных ни деления букв на слова. 
— Давай!
— Вот, смотри. Мы узнаём среднюю длину слова в одну строку кода!
— Подожди. Ты создаёшь сканер входного потока и передаёшь его функции Math.ceil? И что она с ним делает? Она его округляет?
— Не беспокойся. С потоком ввода, ничего не происходит. Видишь, на следующей строчке «.useDelimiter("\\W+")», а затем «.tokens()»? Так мы получаем поток слов. Сначала мы задаём разделитель, а потом получаем слова. 
— Но что означает эта большая буква W?
— Это антоним маленькой буквы w. Все большие буквы это антонимы маленьких букв и наоборот. 
— Постой! Что, вообще, означают эти буквы? Что делает маленькая w?
— Маленькая w это от английского word — слово. Эта буковка означает все символы из которых может состоять слово. Это английские буквы, цифры и символ подчёркивания. В задаче говорится, что могут быть знаки препинания и пробелы, а цифр и подчёркивания нет. Поэтому я могу использовать W чтобы поделить поток на слова. 
— «tokens()» это слова?
— Вообще, это токены. Но в данном случае слова. 
— Хорошо, а что делает последняя строчка?
— Это коллектор...
— Я знаю это слово!
— Отлично, так вот коллектор собирает эти все слова и считает их среднюю длину. Вот это слово «averagingInt» одна из функций коллектора...
— А зачем здесь четыре точки? 
— Так мы передаём функцию в качестве аргумента...
— ??? …
— Ладно. Стримы вы ещё не проходили. Но хоть в первой программке всё понятно?
— Да. public static void main(). Это я поняла…
